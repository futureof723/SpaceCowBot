"""
Discord bot extension for AI-powered question answering.
This module provides a command to ask questions and receive responses in a space cowboy style using OpenAI's API.
"""

import discord
from discord.ext import commands
import openai
import os
import asyncio
import logging
from dotenv import load_dotenv
import time

# Load environment variables from .env file
load_dotenv()

# Set up OpenAI API key from environment variable
openai.api_key = os.getenv('OPENAI_API_KEY')

# Set up logging for error tracking
logger = logging.getLogger(__name__)

# Dictionary to track when each user last used the ask command (for rate limiting)
user_last_asked = {}


class AskCommand(commands.Cog):
    """
    A Cog that provides an AI-powered question answering command.

    This cog allows users to ask questions and receive responses generated by
    OpenAI's API in a space cowboy style. It includes rate limiting to prevent
    abuse and handles API errors gracefully.

    Attributes:
        bot (commands.Bot): The Discord bot instance.
    """

    def __init__(self, bot):
        """
        Initialize the AskCommand cog.

        Args:
            bot (commands.Bot): The Discord bot instance this cog is attached to.
        """
        self.bot = bot

    @commands.command(help="Ask a question and get a space cowboy-style answer.")
    async def ask(self, ctx, *, question: str):
        """
        Process a user question and generate a space cowboy-style response.

        This command takes a user's question, sends it to OpenAI's API with
        instructions to respond in a space cowboy style, and returns the
        generated response to the Discord channel.

        Args:
            ctx (commands.Context): The invocation context.
            question (str): The question asked by the user (captured as a string
                          with all text after the command).

        Returns:
            None: Responses are sent directly to the Discord channel.

        Rate Limits:
            Users can only use this command once every 10 seconds to prevent
            API abuse and excessive token usage.
        """
        # Handle empty or invalid questions
        if not question.strip():
            await ctx.send("ðŸ¤  Ain't no question here, partner. Please ask me somethin'!")
            return

        # Rate limiting to avoid too many requests
        user_id = ctx.author.id
        if user_id in user_last_asked and (
                time.time() - user_last_asked[user_id]) < 10:  # 10 seconds cooldown
            await ctx.send("ðŸ¤  Slow down, partner! You can ask again in a few seconds.")
            return

        # Update the last asked time for this user
        user_last_asked[user_id] = time.time()

        # Construct the prompt for OpenAI
        prompt = f"Answer the following question in the style of a space cowboy: '{question}'"

        try:
            # Use run_in_executor to run the synchronous OpenAI API call in a separate thread
            # This prevents blocking the bot's event loop during the API call
            response = await self.bot.loop.run_in_executor(
                None,
                lambda: openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "system",
                               "content": "You are a space cowboy who gives friendly, adventurous responses."},
                              {"role": "user", "content": question}]
                )
            )

            # Extract the generated text from the response
            answer = response['choices'][0]['message']['content'].strip()

            # Send the response back to Discord
            await ctx.send(f"{answer}")

        except Exception as e:
            # Log the error for debugging purposes
            logger.error(f"Error while fetching response from OpenAI: {e}")

            # Send a user-friendly error message
            await ctx.send(
                "ðŸ¤  Something went wrong with the space-time continuum... try again later.")


# Setup function to add the cog to the bot
async def setup(bot):
    """
    Setup function to add the AskCommand cog to the bot.

    This function is called by Discord.py when the extension is loaded.

    Args:
        bot (commands.Bot): The bot instance to attach the cog to.

    Returns:
        None
    """
    await bot.add_cog(AskCommand(bot))